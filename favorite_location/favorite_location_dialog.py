# -*- coding: utf-8 -*-
"""
/***************************************************************************
 FavoriteLocationDialog
                                 A QGIS plugin
 This plugins selects your favorite location.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-11-17
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Eslem Sahin
        email                : esleemsahiiin@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.core import QgsProject, QgsVectorLayer

# Load the user interface designed in Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'favorite_location_dialog_base.ui'))

# Create the FavoriteLocationDialog class, inheriting from QtWidgets.QDialog and the design class
class FavoriteLocationDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(FavoriteLocationDialog, self).__init__(parent)
        # Load the user interface
        self.setupUi(self)
        # Connect the button click signal to the corresponding function
        self.pushButton.clicked.connect(self.on_pushButton_clicked)
        # Flag to track whether layers are added or not
        self.layers_added = False
        # List containing information about the shapefiles you want to add
        self.shapefiles = [
            {'path': 'C:/Users/ASUS-PC/Desktop/TR_City/city_boundaries.shp', 'name': 'city_boundaries'},
            {'path': 'C:/Users/ASUS-PC/Desktop/Yozgat/Yozgat.shp', 'name': 'Yozgat'}
        ]

    # Helper function to add a vector layer
    def add_vector_layer(self, path, name):
        """Add a vector layer to the project."""
        layer = QgsVectorLayer(path, name, 'ogr')
        # If the layer is not valid, print an error message and return False
        if not layer.isValid():
            print(f'Invalid layer "{name}". Check file path or layer format.')
            return False
        # Add the layer to the project and return True
        QgsProject.instance().addMapLayer(layer)
        return True

    # Function to handle the button click event
    def on_pushButton_clicked(self):
        """Handle the button click event."""
        # If layers have not been added yet
        if not self.layers_added:
            # Flag to track successfully added layers
            layers_added_successfully = True
            # Add layers for each shapefile
            for shapefile in self.shapefiles:
                path, name = shapefile['path'], shapefile['name']
                # Add a vector layer, set the flag to False if unsuccessful
                if not self.add_vector_layer(path, name):
                    layers_added_successfully = False

            # If all layers were added successfully
            if layers_added_successfully:
                print('Layers added successfully.')
                # Set the flag to True, indicating that layers are added
                self.layers_added = True
            else:
                print('Some layers could not be added. Please check and try again.')

        # If layers have already been added
        else:
            print('Layers are already added. No further action is taken.')


